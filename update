#!/bin/bash
#
# BathyCat Seabed Imager - Quick Update Script
# ============================================
# 
# Simple script to update the BathyImager system from GitHub.
#
# Usage: 
#   ./update           - Interactive update with conflict resolution
#   ./update --force   - Force reset to remote version (discards local changes)
#   ./update --stash   - Auto-stash local changes and pull
#
# Author: Mike Bollinger
# Date: August 2025

set -e  # Exit on any error

# Parse command line arguments
FORCE_MODE=false
STASH_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE_MODE=true
            shift
            ;;
        --stash)
            STASH_MODE=true
            shift
            ;;
        --help|-h)
            echo "BathyImager Update Script"
            echo ""
            echo "Usage:"
            echo "  ./update           - Interactive update"
            echo "  ./update --force   - Force reset to remote (loses local changes)"
            echo "  ./update --stash   - Auto-stash and pull"
            echo "  ./update --help    - Show this help"
            echo ""
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo "🚀 BathyImager Seabed Imager - Quick Update"
echo "========================================"

# Check if we're in the right directory
if [ ! -f "src/main.py" ]; then
    echo "❌ Error: Not in BathyImager project directory"
    echo "   Please run this script from the project root"
    echo "   Current directory: $(pwd)"
    echo "   Looking for: src/main.py"
    echo "   Expected location: ~/BathyCat-Seabed-Imager"
    ls -la
    exit 1
fi

# Stop any running services
echo "🛑 Stopping services..."
sudo systemctl stop bathyimager 2>/dev/null && echo "   Service stopped" || echo "   No service running"

# Backup configuration
echo "💾 Backing up configuration..."
if [ -f "config/bathyimager_config.json" ]; then
    cp config/bathyimager_config.json config/bathyimager_config.json.backup
    echo "   Configuration backed up"
else
    echo "   No configuration found"
fi

# Show current version
echo "📍 Current version:"
git log --oneline -1

# Fetch and show what's new
echo "🔍 Checking for updates..."
git fetch origin
NEW_COMMITS=$(git log --oneline HEAD..origin/main | wc -l)

if [ "$NEW_COMMITS" -eq 0 ]; then
    echo "✅ Already up to date!"
    echo "   To start services: sudo systemctl start bathyimager"
    exit 0
fi

echo "📥 Found $NEW_COMMITS new updates:"
git log --oneline HEAD..origin/main

# Pull updates with conflict resolution
echo "⬇️  Pulling updates..."

# Check if we have local changes that would conflict
LOCAL_CHANGES=$(git status --porcelain 2>/dev/null)
if [ -n "$LOCAL_CHANGES" ]; then
    echo "⚠️  Local changes detected:"
    git status --short
    echo ""
    
    # Handle based on mode
    if [ "$FORCE_MODE" = true ]; then
        echo "🚨 Force mode: Discarding local changes..."
        git reset --hard origin/main
        echo "✅ Reset complete - all local changes discarded"
    elif [ "$STASH_MODE" = true ]; then
        echo "📦 Stash mode: Stashing local changes..."
        git stash push -m "Auto-stash before update $(date '+%Y-%m-%d %H:%M:%S')"
        git pull origin main
        echo "🔄 Attempting to restore local changes..."
        if git stash pop; then
            echo "✅ Local changes restored successfully"
        else
            echo "⚠️  Merge conflicts detected - please resolve manually"
            echo "   Your changes are still in git stash"
            echo "   Run: git stash list"
            echo "   Run: git stash show stash@{0}"
        fi
    else
        # Interactive mode
        echo "Update options:"
        echo "1. 🔄 Stash local changes and apply remote updates (RECOMMENDED)"
        echo "2. 🚨 Force reset to remote version (LOSE local changes)"  
        echo "3. 🛑 Cancel update"
        echo ""
        read -p "Choose option (1-3): " choice
        
        case $choice in
            1)
                echo "📦 Stashing local changes..."
                git stash push -m "Auto-stash before update $(date '+%Y-%m-%d %H:%M:%S')"
                git pull origin main
                echo "🔄 Attempting to restore local changes..."
                if git stash pop; then
                    echo "✅ Local changes restored successfully"
                else
                    echo "⚠️  Merge conflicts detected - please resolve manually"
                    echo "   Your changes are still in git stash"
                    echo "   Run: git stash list"
                    echo "   Run: git stash show stash@{0}"
                fi
                ;;
            2)
                echo "🚨 Force resetting to remote version..."
                git reset --hard origin/main
                echo "✅ Reset complete - all local changes discarded"
                ;;
            3)
                echo "🛑 Update cancelled"
                echo "   To restart services: sudo systemctl start bathyimager"
                exit 0
                ;;
            *)
                echo "❌ Invalid choice - cancelling update"
                echo "   To restart services: sudo systemctl start bathyimager"
                exit 1
                ;;
        esac
    fi
else
    # No local changes, normal pull
    git pull origin main
fi

# Update dependencies
echo "📦 Updating dependencies..."
if [ -d "venv" ]; then
    echo "   Using virtual environment..."
    source venv/bin/activate
    if pip install -r requirements.txt --quiet 2>/dev/null; then
        echo "   Dependencies updated successfully"
    else
        echo "⚠️  Could not update dependencies in virtual environment"
        echo "   You may need to install manually:"
        echo "   source venv/bin/activate && pip install -r requirements.txt"
    fi
    deactivate
else
    echo "   No virtual environment found - using system pip..."
    if pip3 install -r requirements.txt --user --quiet 2>/dev/null; then
        echo "   Dependencies updated successfully"
    elif pip3 install -r requirements.txt --user --break-system-packages --quiet 2>/dev/null; then
        echo "   Dependencies updated (with system override)"
    else
        echo "⚠️  Could not update dependencies automatically"
        echo "   You may need to install manually:"
        echo "   pip3 install -r requirements.txt --user --break-system-packages"
    fi
fi

# Restore configuration
echo "🔧 Restoring configuration..."
if [ -f "config/bathyimager_config.json.backup" ]; then
    cp config/bathyimager_config.json.backup config/bathyimager_config.json
    echo "   Configuration restored"
fi

# Fix permissions
echo "🔒 Fixing permissions..."
chmod +x scripts/*.sh
chmod +x update
chmod +x setup_dev.sh
[ -f "run_bathyimager.sh" ] && chmod +x run_bathyimager.sh

# Show new version
echo "🎉 Updated to:"
git log --oneline -1

# Test the update
echo "🧪 Testing update..."
if [ -d "venv" ]; then
    source venv/bin/activate
    if python -c "import sys; sys.path.append('src'); import main; print('✅ Main app loads successfully')" 2>/dev/null; then
        echo "   App test passed"
    else
        echo "❌ App test failed - check for errors"
    fi
    deactivate
else
    if python3 -c "import sys; sys.path.append('src'); import main; print('✅ Main app loads successfully')" 2>/dev/null; then
        echo "   App test passed"
    else
        echo "❌ App test failed - check for errors"
    fi
fi

echo ""
echo "✨ Update complete!"
echo ""
echo "🔧 Service Management:"
echo "   To install/update service: sudo ./scripts/install.sh --update"
echo "   To start service:          sudo systemctl start bathyimager"
echo "   To enable auto-start:      sudo systemctl enable bathyimager"
echo "   To check status:           sudo systemctl status bathyimager"
echo "   To view logs:              sudo journalctl -u bathyimager -f"
echo ""
echo "🏃 Manual Running:"
echo "   • python3 src/main.py --config config/bathyimager_config.json"
echo "   • ./run_bathyimager.sh"
echo ""
echo "🔍 Hardware Diagnostics:"
echo "   • ./scripts/hardware_diagnostics.sh permissions"
echo "   • ./scripts/hardware_diagnostics.sh all"