#!/usr/bin/env python3
"""
Quick GPS Time Sync Test
========================

Test the integrated GPS time sync functionality.
"""

import sys
import time
import logging
from datetime import datetime

# Add src directory to path
sys.path.insert(0, '/home/bathyimager/BathyCat-Seabed-Imager/src')

try:
    from gps import GPS
    from config import Config
    
    # Set up logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    logger = logging.getLogger(__name__)
    
    print("üß™ GPS Time Sync Test Starting...")
    print(f"üìÖ Current system time: {datetime.now()}")
    
    # Load config
    config = Config('/home/bathyimager/BathyCat-Seabed-Imager/config/bathycat_config.json')
    
    # Create GPS instance
    logger.info("Creating GPS instance...")
    gps = GPS(config.get_config())
    
    # Connect to GPS
    logger.info("Connecting to GPS...")
    if not gps.connect():
        logger.error("‚ùå Failed to connect to GPS")
        sys.exit(1)
    
    logger.info("‚úÖ GPS connected successfully")
    
    # Start GPS reading
    logger.info("Starting GPS reading...")
    if not gps.start_reading():
        logger.error("‚ùå Failed to start GPS reading")
        sys.exit(1)
    
    logger.info("‚úÖ GPS reading started")
    
    # Wait for GPS fix and time sync
    logger.info("üõ∞Ô∏è  Waiting for GPS fix and time sync...")
    logger.info("‚è±Ô∏è  This should complete in under 30 seconds...")
    
    start_time = time.time()
    timeout = 60  # 1 minute timeout
    
    while time.time() - start_time < timeout:
        current_fix = gps.get_current_fix()
        
        if current_fix and current_fix.is_valid:
            elapsed = time.time() - start_time
            
            logger.info(f"üõ∞Ô∏è  GPS FIX: {current_fix.latitude:.6f}, {current_fix.longitude:.6f}")
            logger.info(f"üìä Quality: {current_fix.fix_quality}, Satellites: {current_fix.satellites}")
            logger.info(f"‚è±Ô∏è  Time to fix: {elapsed:.1f} seconds")
            
            if hasattr(gps, 'system_time_synced') and gps.system_time_synced:
                logger.info("üïê GPS TIME SYNC: ‚úÖ SUCCESS")
                logger.info(f"üìÖ New system time: {datetime.now()}")
                break
            else:
                logger.info("üïê GPS TIME SYNC: ‚è≥ Waiting...")
        
        time.sleep(1)
    
    else:
        logger.warning("‚è∞ Timeout waiting for GPS fix")
    
    # Show final status
    logger.info("\nüìã FINAL STATUS:")
    logger.info(f"GPS Fix: {'‚úÖ Valid' if current_fix and current_fix.is_valid else '‚ùå Invalid'}")
    logger.info(f"Time Sync: {'‚úÖ Synced' if hasattr(gps, 'system_time_synced') and gps.system_time_synced else '‚ùå Not Synced'}")
    logger.info(f"System Time: {datetime.now()}")
    
    # Cleanup
    gps.stop_reading()
    gps.disconnect()
    
    logger.info("üß™ GPS Time Sync Test Complete")
    
except ImportError as e:
    logger.error(f"‚ùå Import error: {e}")
    logger.error("Make sure you're running this from the correct directory")
    sys.exit(1)
except Exception as e:
    logger.error(f"‚ùå Test error: {e}")
    sys.exit(1)